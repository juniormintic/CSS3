
/*para vincular otra hoja de estilos pero es mala practica por que es bloqueante hasta que no descarge(navegador) lo del import no continua con las demas lineas */
/* Son mala pr√°ctica por que son bloqueantes a la hora de que el navegador lee esta instrucci√≥n */
@import url("otro-hoja.css");


html {
	scroll-behavior: smooth;
}

/*Comentarios en CSS
    Reglas css consta de 2 partes
    1)el selector
    2)bloque de declaraciones{
        atributo:valor;
        atributo-de-mas-dos-palabras:otro-valor;
        
    }
*/


h1 {
	color: orangered;
	background-color: black;
}
/*cuando se aplica estilo a una etiqueta estos se aplicaran a todas las etiquetas que sean iguales si hay 3 <p> lo aplica a todas*/
/* 
  Links de referencia y documentaci√≥n
  https://es.wikipedia.org/wiki/Hoja_de_estilos_en_cascada
  https://www.w3.org/html/logo/
  https://www.w3.org/standards/webdesign/htmlcss.html
  https://www.w3.org/TR/css-2020/
  https://developer.mozilla.org/es/docs/Web/CSS
  https://cssreference.io/
  https://caniuse.com/
  https://codeguide.co/
*/

/* 
Selectores B√°sicos
  1) Etiquetas - son elementos html
  2) Identificadores - atributo id - #
  3) Clases - atributo class - .
*/
p {
	color: midnightblue;
}
/*selector de tipo id para aplicar estilo es considerado un anti-patron o mala practica por que es para elementos unicos y el uso de css es para reciclar o usar varias veses los estilos */
#parrafo-dos {
	background-color: skyblue;
}

/*Dar estilos con clases nos permite reutilizar nuestro codigo css*/
.bg-skyblue {
	background-color: skyblue;
}
.bg-steelblue {
	background-color: steelblue;
}
.text-20 {
	font-size: 20px;
}
.text-32 {
	font-size: 32px;
}

.text-white {
	color: white;
}
/*hijos directo*/
.hijos-directos > li {
	background-color: thistle;
}
/*hojos que esten dentro del bloque sin importar en que orden o altura o nivel*/
.hijos-descendientes b {
	background-color: thistle;
}
/*los selectores de hemanos van a aplicar a los elementos que son  hermanos y que esten por debajo del elemento de referencia,  para la ~ teclas (ctrl + altGr + *+] )*/
.hermanos-general ~ li {
	background-color: thistle;
}
/*aplica el estilo solo a uno al que esta por debajo del selecionado*/
.hermanos-adyacentes + li {
	background-color: thistle;
}

/*selectores de atributos*/
.selectores-atributos a[href] {
	color: orangered;
}

.selectores-atributos a[target="_blank"] {
	font-weight: bold;
}
/*El comodin del * aplica el estilo si contiene el texto en cuestion  */
.selectores-atributos a[href*="jonmircha"] {
	font-size: 24px;
}

/*El comodin del ^ aplica el estilo si contiene el texto en cuestion al inicio para el ^ con teclas( altGr +``,{)*/
.selectores-atributos a[href^="http://"]
{
	text-decoration: none;
}
/*El comodin del $ aplica el estilo si contiene el texto en cuestion al final*/
.selectores-atributos a[href$=".com"] {
	background-color: black;
}
/*El comodin del ~ aplica el estilo si contiene el texto en cuestion en una lista separada por espacios*/
.selectores-atributos a[class~="cursos"] {
	background-color: midnightblue;
}
/*El comodin del | aplica el estilo si contiene el texto en cuestion en una lista separada por espacios y que despues del texto en cuestion venga  un guion medio*/
.selectores-atributos a[class|="menu"] {
	font-style: italic;
}

/*Selector universal*/
* {
	font-family: sans-serif;
}
/*permite aplicar estilo a todos los elementos que esten dentro del selector ej: form para la letra de sus label o input*/
.selector-universal * {
	font-size: 24px;
}

/*
Pseudoclases-Dan estilo dependiendo del contexto posicional o estado del elemento
https://developer.mozilla.org/es/docs/Web/CSS/Pseudo-classes
*/
.form-pseudoclases *:required {
	border-color: yellow;
}
.form-pseudoclases *:valid {
	border-color: green;
}
.form-pseudoclases *:invalid {
	border-color: red;
}
.form-pseudoclases *:disabled {
	background-color: salmon;
}
.form-pseudoclases *:focus {
	background-color: skyblue;
}

.menu-pseudoclases a:visited {
	color: gray;
}
/*en caso de hover se recomienda dejar para de ultimo o las otras pseudoclases pueden sobre ponersen al efecto 
un orden es 
:link
:visited
:hover
*/
.menu-pseudoclases a:hover {
	color: orange;
}

.p-pseudoclases:hover {
	font-size: 20px;
}

#temario-css:target {
	background-color: greenyellow;
}

/*estilos por posicion de elementos hijos*/
/*primer elemt hijo */
.lista-pseudoclases li:first-child {
	color: green;
}
/*ultimo elemt hijo */
.lista-pseudoclases li:last-child {
	color: violet;
}
/*al tercer elemento hijo*/
.lista-pseudoclases li:nth-child(3) {
	color: navy;
}
/*cuenta en grupo segun el numero este caso cada 4 hijos aplica el estilo*/
.lista-pseudoclases li:nth-child(4n) {
	font-size: 20px;
}
/*es parecida al anterior detres mas uno */
.lista-pseudoclases li:nth-child(3 + 1) {
	font-weight: bold;
}
/*para element en posicion par*/
.lista-pseudoclases li:nth-child(even) {
	background-color: orange;
}
/*para element en posicion inpar*/
.lista-pseudoclases li:nth-child(odd) {
	background-color: yellow;
}

/*dar estilosa elmentos hijos segun el tipo de elemnto*/
/*primer elemento de tipo p*/
.article-pseudoclases p:first-of-type {
	background-color: pink;
}
/*ultimo elemento de tipo p*/
.article-pseudoclases p:last-of-type {
	background-color: violet;
}
/*el tercer elemento de tipo p*/
.article-pseudoclases p:nth-of-type(3) {
	background-color: skyblue;
}
/*cada cuatro elementos de tipo p*/
.article-pseudoclases p:nth-of-type(4n) {
	font-size: 20px;
}
/*elementos pares de tipo p*/
.article-pseudoclases p:nth-of-type(even) {
	color: orange;
}
/*elementos impares de tipo p*/
.article-pseudoclases p:nth-of-type(odd) {
	color: yellow;
}

/*para omitir un elemento o varios separados por coma*/
.article-pseudoclases *:not(p) {
	background-color: bisque;
}

/*
Pseudoelementos - Dan estilos a partes espec√≠ficas de un elemento, se usa el :: para diferenciarlos de las pseudoclases
https://developer.mozilla.org/es/docs/Web/CSS/Pseudoelementos
estas tambien se pueden combinar con pseudoclases de estado ejemplo  :hover::after
*/

/*agrega un elemento pseudo-elemento al inicio del seleccionado*/
.saga-geminis::before{
	content: "ü§º‚Äç‚ôÇÔ∏è";
}
/*agrega un elemento  pseudo-elemento al final del seleccionado*/
.saga-geminis::after{
	content: "‚ôä";
}

.saga-precio::before{
	content: "$";
	font-weight: bold;
}
.saga-precio::after{	
	content: "USD";
	font-weight: bold;
}

/*usado para modificar la primera letra */
.p-pseudoelementos::first-letter{
	font-weight: bold;
	font-size: 32px;
	
}
/*usado para modificar la primera linea  */
.p-pseudoelementos::first-line{
	color: coral;
}
/*usado para modificar estilos a la hora de seleccion  */
.p-pseudoelementos::selection{
	background-color: black;
	color: greenyellow;
}
/*usado para modificar estilos del placehoder que hay por defecto */
.input-pseudoelementos::placeholder{
	color: green;
}



/*agrupar selectores*/

.form-agrupar-selectores input[type="text"],
.form-agrupar-selectores input[type="email"],
.form-agrupar-selectores textarea{
	border-color: yellow;
	border-width: 2px;
	background-color: black;
	border-style: dashed;
	font-size: 20px;
	display: block;
	width: 300px;
}

/*TEMA MUY IMPORTANTE*/

/* 
El Algoritmo de CSS: Es la forma en que el navegador aplica los estilos al documento HTML. Es vital entender este concepto para que entiendas como se aplican y en algunas ocasiones se sobreescriben las reglas CSS.
  1) La Cascada.
  2) La Especificidad.
  3) La Herencia.
La Cascada es el mecanismo en que el navegador aplica los estilos. Y toma en cuenta lo siguiente en este orden:
  1) El Origen del C√≥digo:
    - El User Agent (los estilos por defecto del navegador)
    - Personalizaciones del usuario.
    - Los estilos del autor.
  2) La Especificidad del Selector
  3) Orden de Aparici√≥n
La Especificidad es el peso que tiene un selector cuando hay conflicto de estilos. Se calcula de la siguiente forma:
  Etiquetas y pseudoelementos -------------- 0,0,0,1
  Clases, atributos y pseudoclases ------------0,0,1,0
  Identificadores -------------------------------0,1,0,0
  Estilos en l√≠nea--------------------------------1,0,0,0
  !important ------------------Rompe la especificidad
La Herencia, es la capacidad de un selector de obtener (heredar) los valores de sus ancestros m√°s cercanos, para aplicarla se usa el valor inherit, si queremos evitarla podemos asignar otro valor o inicializar la propiedad en cuesti√≥n con el valor initial
https://web.dev/learn/css/inheritance/#which-properties-are-inheritable
*/

/*ejemplo de peso de selector la especifidad puede alterar la cascada y aplicar el estilo segun el mas pesado sin importar la cascada */

/*1,1,1*/
blockquote#cita-marco.cita-marco{
	background-color: lightskyblue;
}
/*0,1**/
blockquote{
	background-color:burlywood;
}
/*1,0,0*/
#cita-marco{
	background-color: lightgreen;
}
/*0,1,1*/
blockquote.cita-marco{
	background-color: tomato;
}
/*0,1,0*/
.cita-marco{
	background-color: cornflowerblue;
}
/*NUNCA USAR !IMPORTANT ROMPE LA ESPECIFICIDAD ES UNA MALA PRACTICA**/
.cita-marco{
	background-color: mediumaquamarine !important;
}


blockquote#cita-marco{
	background-color: lightsalmon;
	
}


/*HERENCIA EJEMPLO*/
/*Link para ver las propiedaddes que si se heredan*/
/*https://web.dev/learn/css/inheritance/#which-properties-are-inheritable*/
.cita-marco{
	background-color: darkorange !important;
	/*las tipografia las heredan los elementos hijos por defecto sin ser indicadas con inherit en el hijo*/
	font-size: 32px;
	border-style: dotted;
	border-color: red;
}

.cita-marco cite{
	background-color: pink;
	/*para hacer que herede el color del padre inherit*/
	background-color: inherit;
	/*se anula tipografia heredadda cuando cuando se especifica un valor*/
	font-size: 24px;
	/*con initial se deja el estilo que indica el navegador*/
	font-size: initial;
	border-style: inherit;
	border-color: inherit;
}

/*ejemplo de prefijos css*/
/* 
https://autoprefixer.github.io/
https://caniuse.com/
Prefijos de los navegadores
-webkit-user-select: none;
-moz-user-select: none;
-ms-user-select: none;
user-select: none;
*/